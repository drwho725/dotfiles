priority 50

## Snippets from SnipMate, taken from
## https://github.com/scrooloose/snipmate-snippets.git

snippet array "array"
$${1:arrayName} = array('${2}' => ${3});${4}
endsnippet

snippet def "def"
define('${1}'${2});${3}
endsnippet

snippet do "do"
do {
	${2:${VISUAL}}
} while (${1:/* condition */});"
endsnippet

snippet doc_f "doc_f"
/**
 * $2
 * @return ${4:void}
 * @author ${5:`!v g:snips_author`}
 **/
${1:public }function ${2:someFunc}(${3})
{
	${6}
}
endsnippet

snippet doc_i "doc_i"
/**
 * $1
 * @package ${2:default}
 * @author ${3:`!v g:snips_author`}
 **/
interface ${1:someClass}
{
	${4}
}
endsnippet

snippet else "else"
else
{
	${1:${VISUAL}}
}
endsnippet

snippet get "get"
$_GET['${1}']${2}
endsnippet

snippet if "if"
if (${1:/* condition */})
{
	${2:${VISUAL}}
}
endsnippet

snippet elif "elseif"
elseif (${1:/* condition */})
{
	${2:${VISUAL}}
}
endsnippet

snippet inc "inc"
include '${1:file}';${2}
endsnippet

snippet log "log"
error_log(var_export(${1}, true));${2}
endsnippet

snippet post "post"
$_POST['${1}']${2}
endsnippet

snippet req1 "req1"
require_once '${1:file}';${2}
endsnippet

snippet session "session"
$_SESSION['${1}']${2}
endsnippet

snippet t "t"
$${1:retVal} = (${2:condition}) ? ${3:a} : ${4:b};${5}
endsnippet

snippet var "var"
var_export(${1});${2}
endsnippet

snippet getter "PHP Class Getter" b
/*
 * Getter for $1
 */
public function get${1/\w+\s*/\u$0/}()
{
	return $this->$1;$2
}
endsnippet

snippet setter "PHP Class Setter" b
/*
 * Setter for $1
 */
public function set${1/\w+\s*/\u$0/}($$1)
{
	$this->$1 = $$1;$3
	${4:return $this;}
}
endsnippet

snippet gs "PHP Class Getter Setter" b
/*
 * Getter for $1
 */
public function get${1/\w+\s*/\u$0/}()
{
	return $this->$1;$2
}

/*
 * Setter for $1
 */
public function set${1/\w+\s*/\u$0/}($$1)
{
	$this->$1 = $$1;$3
	${4:return $this;}
}
endsnippet

snippet pub "Public function" b
public function ${1:name}(${2:$param})
{
	${3:${VISUAL:return null;}}
}
endsnippet

snippet pro "Protected function" b
protected function ${1:name}(${2:$param})
{
	${3:${VISUAL:return null;}}
}
endsnippet

snippet pri "Private function" b
private function ${1:name}(${2:$param})
{
	${3:${VISUAL:return null;}}
}
endsnippet

snippet cpub "Public Cached Function" b
private function ${1:name}FromDb(${2:$param})
{
	${3:${VISUAL:return null;}}
}

public function $1($2)
{
	return $this->getCache()->$1FromDb($2);
}
endsnippet

snippet cpri "Private Cached Function" b
private function ${1:name}FromDb(${2:$param})
{
	${3:${VISUAL:return null;}}
}

private function $1($2)
{
	return $this->getCache()->$1FromDb($2);
}
endsnippet

snippet pubs "Public static function" b
public static function ${1:name}(${2:$param})
{
	${3:${VISUAL:return null;}}
}
endsnippet

snippet pros "Protected static function" b
protected static function ${1:name}(${2:$param})
{
	${3:${VISUAL:return null;}}
}
endsnippet

snippet pris "Private static function" b
private static function ${1:name}(${2:$param})
{
	${3:${VISUAL:return null;}}
}
endsnippet

snippet fu "Function snip" b
function ${1:name}(${2:$param})
{
	${3:${VISUAL:return null;}}
}
endsnippet

snippet for "for"
for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++})
{
	${4:${VISUAL}}
}
endsnippet

snippet forek "Foreach loop w/key"
foreach ($${1:variable} as $${2:key} => $${3:value})
{
	${4:${VISUAL}}
}
endsnippet

snippet fore "Foreach loop"
foreach ($${1:variable} as $${2:value})
{
	${3:${VISUAL}}
}
endsnippet

snippet new "New class instance" b
$$1 = new $1($2);
endsnippet

snippet ife "if else"
if (${1:/* condition */})
{
	${2:// code...}
}
else
{
	${3:// code...}
}
endsnippet

snippet class "Class declaration template" b
/**
 * Class ${1:`!p snip.rv=snip.fn.split('.')[0]`}
 * @author ${2:`!v g:snips_author`}
 */
class $1
{
	public function ${3:__construct}(${4:$options})
	{
		${5:// code}
	}
}
endsnippet

snippet construct "__construct()" b
/**
 * @param $2mixed ${1/, /\n     * \@param mixed /g}
 */
public function __construct(${1:$dependencies})
{
	${1/\$(\w+)(, )*/\n        $this->$1 = $$1;/g}
}
endsnippet

# :vim:ft=snippets:
